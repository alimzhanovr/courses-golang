https://t.me/go_stepik - telegram chan
https://golang.org/dl/ - GO
https://golangs.org/install-on-ubuntu-18-04 - download Go Ubuntu

IDES ------------------------------------------------------------------------------
https://www.jetbrains.com/go/ - Goland
https://code.visualstudio.com/Download - VSCode
https://atom.io/ - Atom
https://www.sublimetext.com/ - Sublime Text
https://github.com/visualfc/liteide/releases - Lite IDE
Netbeans, Vim, Emacs и других

Browsers ------------------------------------------------------------------------------
Repl.it - Самый удобный с поддержкой терминала и полноценного ввода
Поддерживается ввод данных: https://www.tutorialspoint.com/execute_golang_online.php
Поддерживается ввод данных: https://ideone.com
Нет ввода данных: https://play.golang.org

-------------------------------------------------------------------------------------
Важно помнить, что при использовании обратных апострофов в Go создается чистый литерал строки,
а при использовании двойных кавычек — интерпретированный литерал строки. Чтобы узнать больше о разнице между ними,
ознакомьтесь с руководством Введение в работу со строками в Go.
https://www.digitalocean.com/community/tutorials/an-introduction-to-working-with-strings-in-go

-------------------------------------------------------------------------------------
https://go.dev/doc/effective_go#arrays - Эффективная работа с массивами

Slice -------------------------------------------------------------------------------------
Если кому-то не слишком понятно:
https://habr.com/ru/company/otus/blog/465613/ (перевод; и не очень хороший)
https://www.sohamkamani.com/golang/arrays-vs-slices/ (оригинал)
https://golangs.org/slice-array
https://golangs.org/array-append-make

-------------------------------------------------------------------------------------
GoDOC - https://go.dev/doc/

-------------------------------------------------------------------------------------
Полный список встроенных пакетов в Go можно найти по адресу https://golang.org/pkg/.

-------------------------------------------------------------------------------------
https://go.dev/doc/code - How to Write Go Code

-------------------------------------------------------------------------------------
Как работает память - https://youtu.be/CnsxNw2Unj8

Подробнее про принципы работы памяти можно узнать здесь:
https://www.youtube.com/watch?v=0A1e8eceIsY
https://www.youtube.com/watch?v=XETZoRYdtkw

ОЗУ - оперативное запоминающее устройство. В современных вычислительных устройствах,
используется сложная организация оперативной памяти. По сути, если поделить вычислительное устройство на блоки,
то можно, в каждом блоке использовать свою оперативную память. По принципу работы,
разделение на статическую оперативную память - регистровую и динамическую
оперативную память(на основе емкости затворов полевых транзисторов).
Соответственно, статическая память или регистры - прожорливая в плане энергопотребления память,
но самая быстрая и не требует ничего дополнительного для длительного хранения информации(кроме наличия питания).
Динамическая память - массив полевых транзистров, где емкость затвора полевого транзистора, выступает как элемент памяти.
Поскольку, входное сопротивление полевого транзистора - высокое(мегомы), что, позволяет хранить, заряд
этого псевдокондесатора в течении тысячных долей секунды. Этого достаточно, чтобы периодически, осуществляя доступ,
возобновлять заряд конденсатора. В отличии от регистровой памяти, энергопотребление динамической памяти - умеренное.
В современных процессорах используется именно регистровая память и её объемы
там не так велики(относительно внешней динамической). И это понятно, там необходимо, быстро работать с данными.
В случае динамической памяти, время, необходимое для чтения и записи, существенно выше, на порядок.
Кроме того, существуют накладные расходы на синхронизацию. Нужно заметить, что по физическому методу передачи данных
в динамическую оперативную память, разделяются, на параллельный доступ и последовательный доступ.
Раньше, память была параллельной по доступу. Сейчас, ввиду того, что требования по монтажу высоки,
невозможно, без гонок(искажений), передать параллельные сигналы. Передавая сигналы последовательно,
мы получаем заниженную скорость, но без гонок. И поскольку, можно, использовать множество последовательных линий,
получаем, такую же производительность! Устройство современной памяти вычислительных устройств - наслоение
огромного количества технологий, невозможно достоверно, на пальцах, всё это объяснить.

-------------------------------------------------------------------------------------
рекомендуем дополнительно прочитать интересную статью по теме УКАЗАТЕЛЕЙ https://habr.com/en/post/339192/

https://www.youtube.com/playlist?list=PL2_aWCzGMAwLZp6LMUKI3cc7pgGsasm2_
Чел в этих лекциях всё по полочкам раскладывает. Лучшего объяснения я пока не встречал. Это просто огонь!
Собственно из лекций станет понятно всё, в т.ч. почему срезы передаются в функции не по значению, а по указателю.
В Go под капотом всё, как в С, только многие моменты скрыты от разработчиков на Go. Поэтому понимание,
как это всё работает в С, точно пригодится при разработке на Go.

мне вот это зашло:
https://youtu.be/IEOHwGW3AKU

Как дополнение - неплохая статья про указатели в Go - http://golang-book.ru/chapter-08-pointers.html

Structs -------------------------------------------------------------------------------------
Как дополнение:
структура представляет собой удобный способ абстракции, когда мы "прячем" внутрь структуры (то есть нового типа данных)
все детали, и начинаем оперировать структурой как цельной сущностью, работая с внутренними деталями только тогда,
когда это необходимо. То есть, к примеру, от функции к функции мы передаем "Круг", в массивах можем хранить "Круги" и
в целом оперировать "Кругами" как цельними объектами, и только когда нам надо совершить какое-то действие - узнать площадь
круга, или понять, лежит ли заданная точка внутри определенного "Круга" - мы извлекаем из "Круга"
нужные нам детали и проводим вычисления.
Такое оперирование данными в теории вычислений называют "абстракцией данных".
Лучший материал по данной теме - курс MIT 6.001 SiCP,
глава 2 "Абстракция данных" - http://newstar.rinet.ru/~goga/sicp/sicp.pdf

https://habr.com/en/post/225907/ - Является ли Go языком ООП?

-------------------------------------------------------------------------------------
Так как мы рассмотрели только основные функции мы рекомендуем
ознакомиться с официальной документацией пакета "strings" - https://godoc.org/strings .

можно ещё добавить ссылку на \t, \n итд https://golang.org/ref/spec#Rune_literals
https://stackoverflow.com/questions/31770995/difference-between-uppercase-and-titlecase

-------------------------------------------------------------------------------------
Error handling - https://github.com/golang/go/wiki/CodeReviewComments#error-strings

-------------------------------------------------------------------------------------
strconv - https://pkg.go.dev/strconv?tab=doc
strings - https://pkg.go.dev/strings?tab=doc
encoding/csv - https://pkg.go.dev/encoding/csv?tab=doc
bufio - https://pkg.go.dev/bufio?tab=doc

-------------------------------------------------------------------------------------
Функции как объекты первого класса

Подробнее об этом можно почитать в Википедии здесь и здесь.
https://ru.wikipedia.org/wiki/%D0%9E%D0%B1%D1%8A%D0%B5%D0%BA%D1%82_%D0%BF%D0%B5%D1%80%D0%B2%D0%BE%D0%B3%D0%BE_%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D0%B0
https://ru.wikipedia.org/wiki/%D0%A4%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D0%B8_%D0%BF%D0%B5%D1%80%D0%B2%D0%BE%D0%B3%D0%BE_%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D0%B0

-------------------------------------------------------------------------------------
Interfaces
https://www.digitalocean.com/community/tutorials/how-to-use-interfaces-in-go-ru
https://golangify.com/interface
https://youtu.be/tCN8ac6C1tA может кому поможет)

-------------------------------------------------------------------------------------
Ioutuil
Коллеги, если обновили версию Go на новую, то смотреть скорее вот сюда
https://www.cloudhadoop.com/2018/11/learn-golang-tutorials-file-directory.html#how-to-print-current-working-directory--to-console
https://pkg.go.dev/os@go1.17#ReadFile

-------------------------------------------------------------------------------------
https://golang.org/pkg/reflect/#StructTag
https://golang.org/pkg/go/ast/#Field (Tag *BasicLit)

-------------------------------------------------------------------------------------
Concurrency
https://habr.com/ru/company/avito/blog/466495/ - Как не ошибиться с конкурентностью в Go
https://golangify.com/life-mars - Конкурентность в Go на примере создания игры для изучения Марса
https://habr.com/ru/post/489862/ - Планирование в Go: Часть II — Планировщик Go
https://habr.com/ru/post/502506/ - GO Scheduler: теперь не кооперативный?
https://habr.com/ru/post/271789/ - Танцы с мьютексами в Go
https://habr.com/ru/post/490336/ - Анатомия каналов в Go
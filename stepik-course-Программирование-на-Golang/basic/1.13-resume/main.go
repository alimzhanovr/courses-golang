package main

func main() {
	//1
	//Дано трехзначное число. Найдите сумму его цифр.
	//Формат входных данных
	//На вход дается трехзначное число.
	//Формат выходных данных
	//Выведите одно целое число - сумму цифр введенного числа.
	//Sample Input:
	//745
	//Sample Output:
	//16
	//fmt.Println(SumOfNumbers(745))

	//2
	//Дано трехзначное число. Переверните его, а затем выведите.
	//Формат входных данных
	//На вход дается трехзначное число, не оканчивающееся на ноль.
	//Формат выходных данных
	//Выведите перевернутое число.
	//Sample Input:
	//843
	//Sample Output:
	//348
	//fmt.Println(FlipNumber(843))

	//3
	//Идёт k-я секунда суток. Определите, сколько целых часов h и целых минут m прошло с начала суток. Например, если
	//k=13257=3*3600+40*60+57,
	//то h=3 и m=40.
	//Входные данные
	//На вход программе подается целое число k (0 < k < 86399).
	//Выходные данные
	//Выведите на экран фразу:
	//It is ... hours ... minutes.
	//Вместо многоточий программа должна выводить значения h и m, отделяя их от слов ровно одним пробелом.
	//Sample Input:
	//13257
	//Sample Output:
	//It is 3 hours 40 minutes.
	//fmt.Println(Time(13257))

	//4
	//Заданы три числа - a, b, c (a < b < c)a,b,c(a<b<c) - длины сторон треугольника.
	//Нужно проверить, является ли треугольник прямоугольным. Если является, вывести "Прямоугольный".
	//Иначе вывести "Непрямоугольный"
	//Sample Input:
	//6 8 10
	//Sample Output:
	//Прямоугольный
	//fmt.Println(Triangle(6, 8, 10))

	//5
	//Входные данные
	//Даны три натуральных числа a, b, c. Определите, существует ли треугольник с такими сторонами.
	//Выходные данные
	//Если треугольник существует, выведите строку "Существует",
	//иначе выведите строку "Не существует". Строку выводите без кавычек.
	//Sample Input:
	//4 5 6
	//Sample Output:
	//Существует
	//fmt.Println(TriangleExists(4, 5, 6))

	//6
	//Даны два числа. Найти их среднее арифметическое.
	//Формат входных данных
	//На вход дается два целых положительных числа a и b.
	//Формат выходных данных
	//Программа должна вывести среднее арифметическое чисел a и b (ответ может быть целым числом или дробным)
	//Sample Input 1:
	//3 5
	//Sample Output 1:
	//4
	//Sample Input 2:
	//277 154
	//Sample Output 2:
	//215.5
	//fmt.Println(ArithmeticMean(277, 154))

	//7
	//Количество нулей
	//По данным числам, определите количество чисел, которые равны нулю.
	//Входные данные
	//Вводится натуральное число N, а затем N чисел.
	//Выходные данные
	//Выведите количество чисел, которые равны нулю.
	//Sample Input:
	//5
	//1
	//8
	//100
	//0
	//12
	//Sample Output:
	//1
	//Program7()

	//8
	//Количество минимумов
	//Найдите количество минимальных элементов в последовательности.
	//Входные данные
	//Вводится натуральное число N, а затем N целых чисел последовательности.
	//Выходные данные
	//Выведите количество минимальных элементов последовательности.
	//Sample Input:
	//3
	//21
	//11
	//4
	//Sample Output:
	//1
	//Program8()

	//9
	//Цифровой корень
	//Цифровой корень натурального числа — это цифра, полученная в результате итеративного процесса суммирования цифр,
	//на каждой итерации которого для подсчета суммы цифр берут результат, полученный на предыдущей итерации.
	//Этот процесс повторяется до тех пор, пока не будет получена одна цифра.
	//Например цифровой корень 65536 это 7 , потому что 6+5+5+3+6=25 и 2+5=7 .
	//По данному числу определите его цифровой корень.
	//Входные данные
	//Вводится одно натуральное число n, не превышающее 10^7.
	//Выходные данные
	//Вывести цифровой корень числа n.
	//Sample Input:
	//3456
	//Sample Output:
	//9
	//fmt.Println(digitalRoot(2222222))

	//10
	//Самое большое число, кратное 7
	//Найдите самое большее число на отрезке от a до b, кратное 7 .
	//Входные данные
	//Вводится два целых числа a и b (a≤b).
	//Выходные данные
	//Найдите самое большее число на отрезке от a до b (отрезок включает в себя числа a и b), кратное 7 ,
	//или выведите "NO" - если таковых нет.
	//Sample Input:
	//100
	//500
	//Sample Output:
	//497
	//fmt.Println(BigMultiple(100, 500, 7))

	//11
	//По данному числу n закончите фразу "На лугу пасется..."
	//одним из возможных продолжений: "n коров", "n корова", "n коровы", правильно склоняя слово "корова".
	//Входные данные
	//Дано число n (0<n<100).
	//Выходные данные
	//Программа должна вывести введенное число n и одно из слов (на латинице): korov, korova или korovy,
	//например, 1 korova, 2 korovy, 5 korov. Между числом и словом должен стоять ровно один пробел.
	//Sample Input:
	//10
	//Sample Output:
	//10 korov
	//Program11()

	//12
	//По данному числу N распечатайте все целые значения степени двойки, не превосходящие N, в порядке возрастания.
	//Входные данные
	//Вводится натуральное число.
	//Выходные данные
	//Выведите ответ на задачу.
	//Sample Input:
	//50
	//Sample Output:
	//1 2 4 8 16 32
	//fmt.Println(DegreesOfTwo(50))

	//13
	//Номер числа Фибоначчи
	//Дано натуральное число A > 1. Определите, каким по счету числом Фибоначчи оно является,
	//то есть выведите такое число n, что φn=A. Если А не является числом Фибоначчи, выведите число -1.
	//Входные данные
	//Вводится натуральное число.
	//Выходные данные
	//Выведите ответ на задачу.
	//Sample Input:
	//8
	//Sample Output:
	//6
	//Program13()

	//14
	//Двоичная запись
	//Дано натуральное число N. Выведите его представление в двоичном виде.
	//Входные данные
	//Задано единственное число N
	//Выходные данные
	//Необходимо вывести требуемое представление числа N.
	//Sample Input:
	//12
	//Sample Output:
	//1100
	//fmt.Println(BinaryNotation(12))

	//15
	//Из натурального числа удалить заданную цифру.
	//Входные данные
	//Вводятся натуральное число и цифра, которую нужно удалить.
	//Выходные данные
	//Вывести число без заданных цифр.
	//Sample Input:
	//38012732
	//3
	//Sample Output:
	//801272
	//fmt.Println(DeleteNumber(38012732, 3))
}
